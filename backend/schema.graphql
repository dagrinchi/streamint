# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  role: [UserRoleType!]
  wallet: Wallet
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

enum UserRoleType {
  ROLE_ADMIN
  ROLE_AD_MANAGER
  ROLE_CONTENT_CREATOR
  ROLE_VIEWER
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  wallet: WalletWhereInput
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  role: [UserRoleType!]
  wallet: WalletRelateToOneForUpdateInput
  createdAt: DateTime
}

input WalletRelateToOneForUpdateInput {
  create: WalletCreateInput
  connect: WalletWhereUniqueInput
  disconnect: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  role: [UserRoleType!]
  wallet: WalletRelateToOneForCreateInput
  createdAt: DateTime
}

input WalletRelateToOneForCreateInput {
  create: WalletCreateInput
  connect: WalletWhereUniqueInput
}

type Wallet {
  id: ID!
  user: User
  address: String
  publickey: String
}

input WalletWhereUniqueInput {
  id: ID
}

input WalletWhereInput {
  AND: [WalletWhereInput!]
  OR: [WalletWhereInput!]
  NOT: [WalletWhereInput!]
  id: IDFilter
  user: UserWhereInput
  address: StringFilter
  publickey: StringFilter
}

input WalletOrderByInput {
  id: OrderDirection
  address: OrderDirection
  publickey: OrderDirection
}

input WalletUpdateInput {
  user: UserRelateToOneForUpdateInput
  address: String
  publickey: String
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input WalletUpdateArgs {
  where: WalletWhereUniqueInput!
  data: WalletUpdateInput!
}

input WalletCreateInput {
  user: UserRelateToOneForCreateInput
  address: String
  publickey: String
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Ad {
  id: ID!
  title: String
  starts: CalendarDay
  ends: CalendarDay
  description: String
  status: AdStatusType
  video: FileFieldOutput
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  author: User
}

scalar CalendarDay @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

enum AdStatusType {
  DRAFT
  IN_PROGRESS
  PUBLISHED
}

type FileFieldOutput {
  filename: String!
  filesize: Int!
  url: String!
}

input AdWhereUniqueInput {
  id: ID
}

input AdWhereInput {
  AND: [AdWhereInput!]
  OR: [AdWhereInput!]
  NOT: [AdWhereInput!]
  id: IDFilter
  title: StringFilter
  starts: CalendarDayFilter
  ends: CalendarDayFilter
  description: StringFilter
  status: AdStatusTypeNullableFilter
  tags: TagManyRelationFilter
  author: UserWhereInput
}

input CalendarDayFilter {
  equals: CalendarDay
  in: [CalendarDay!]
  notIn: [CalendarDay!]
  lt: CalendarDay
  lte: CalendarDay
  gt: CalendarDay
  gte: CalendarDay
  not: CalendarDayFilter
}

input AdStatusTypeNullableFilter {
  equals: AdStatusType
  in: [AdStatusType!]
  notIn: [AdStatusType!]
  not: AdStatusTypeNullableFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input AdOrderByInput {
  id: OrderDirection
  title: OrderDirection
  starts: OrderDirection
  ends: OrderDirection
  description: OrderDirection
  status: OrderDirection
}

input AdUpdateInput {
  title: String
  starts: CalendarDay
  ends: CalendarDay
  description: String
  status: AdStatusType
  video: FileFieldInput
  tags: TagRelateToManyForUpdateInput
  author: UserRelateToOneForUpdateInput
}

input FileFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input AdUpdateArgs {
  where: AdWhereUniqueInput!
  data: AdUpdateInput!
}

input AdCreateInput {
  title: String
  starts: CalendarDay
  ends: CalendarDay
  description: String
  status: AdStatusType
  video: FileFieldInput
  tags: TagRelateToManyForCreateInput
  author: UserRelateToOneForCreateInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Post {
  id: ID!
  title: String
  description: String
  status: PostStatusType
  video: FileFieldOutput
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  author: User
  assignment: JSON
  placements: [AssignmentPlacements]
}

enum PostStatusType {
  DRAFT
  IN_PROGRESS
  ASSIGNMENT
}

type AssignmentPlacements {
  id: String
  assignment_id: String
  provider_id: String
  provider_connection_strings: [String]
  merkle_root: String
  merkle_tree: [String]
  process_id: String
  private_key: String
  public_key: String
  expires: String
  is_funded: Boolean
  required_reward: Int
  required_collateral: Int
  error_was: String
  status: String
  created_at: String
  updated_at: String
  AssignmentId: String
}

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  status: PostStatusTypeNullableFilter
  tags: TagManyRelationFilter
  author: UserWhereInput
}

input PostStatusTypeNullableFilter {
  equals: PostStatusType
  in: [PostStatusType!]
  notIn: [PostStatusType!]
  not: PostStatusTypeNullableFilter
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  status: OrderDirection
}

input PostUpdateInput {
  title: String
  description: String
  status: PostStatusType
  video: FileFieldInput
  tags: TagRelateToManyForUpdateInput
  author: UserRelateToOneForUpdateInput
  assignment: JSON
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  description: String
  status: PostStatusType
  video: FileFieldInput
  tags: TagRelateToManyForCreateInput
  author: UserRelateToOneForCreateInput
  assignment: JSON
}

type Tag {
  id: ID!
  name: String
  ads(where: AdWhereInput! = {}, orderBy: [AdOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AdWhereUniqueInput): [Ad!]
  adsCount(where: AdWhereInput! = {}): Int
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  ads: AdManyRelationFilter
  posts: PostManyRelationFilter
}

input AdManyRelationFilter {
  every: AdWhereInput
  some: AdWhereInput
  none: AdWhereInput
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  ads: AdRelateToManyForUpdateInput
  posts: PostRelateToManyForUpdateInput
}

input AdRelateToManyForUpdateInput {
  disconnect: [AdWhereUniqueInput!]
  set: [AdWhereUniqueInput!]
  create: [AdCreateInput!]
  connect: [AdWhereUniqueInput!]
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  ads: AdRelateToManyForCreateInput
  posts: PostRelateToManyForCreateInput
}

input AdRelateToManyForCreateInput {
  create: [AdCreateInput!]
  connect: [AdWhereUniqueInput!]
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createWallet(data: WalletCreateInput!): Wallet
  createWallets(data: [WalletCreateInput!]!): [Wallet]
  updateWallet(where: WalletWhereUniqueInput!, data: WalletUpdateInput!): Wallet
  updateWallets(data: [WalletUpdateArgs!]!): [Wallet]
  deleteWallet(where: WalletWhereUniqueInput!): Wallet
  deleteWallets(where: [WalletWhereUniqueInput!]!): [Wallet]
  createAd(data: AdCreateInput!): Ad
  createAds(data: [AdCreateInput!]!): [Ad]
  updateAd(where: AdWhereUniqueInput!, data: AdUpdateInput!): Ad
  updateAds(data: [AdUpdateArgs!]!): [Ad]
  deleteAd(where: AdWhereUniqueInput!): Ad
  deleteAds(where: [AdWhereUniqueInput!]!): [Ad]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
  role: [UserRoleType!]
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  wallet(where: WalletWhereUniqueInput!): Wallet
  wallets(where: WalletWhereInput! = {}, orderBy: [WalletOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: WalletWhereUniqueInput): [Wallet!]
  walletsCount(where: WalletWhereInput! = {}): Int
  ad(where: AdWhereUniqueInput!): Ad
  ads(where: AdWhereInput! = {}, orderBy: [AdOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AdWhereUniqueInput): [Ad!]
  adsCount(where: AdWhereInput! = {}): Int
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  tag(where: TagWhereUniqueInput!): Tag
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
